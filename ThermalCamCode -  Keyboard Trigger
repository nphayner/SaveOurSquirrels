import os
import time
import logging
import numpy as np
import cv2 as cv
from smbus import SMBus
from spidev import SpiDev
from gpiozero import DigitalInputDevice, DigitalOutputDevice
from senxor.mi48 import MI48, format_header, format_framestats
from senxor.utils import data_to_frame, cv_filter
from senxor.interfaces import SPI_Interface, I2C_Interface

# Configure logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=os.environ.get("LOGLEVEL", "DEBUG"))

# Define directory where images will be saved
SAVE_DIRECTORY = "/home/sos/Pictures"
os.makedirs(SAVE_DIRECTORY, exist_ok=True)

# Function to generate a timestamped filename
def get_filename():
    ts = time.strftime('%Y%m%d-%H%M%S', time.localtime())
    return os.path.join(SAVE_DIRECTORY, f"thermal_image_{ts}.png")

# Camera setup
RPI_GPIO_I2C_CHANNEL = 1
RPI_GPIO_SPI_BUS = 0
RPI_GPIO_SPI_CE_MI48 = 0
MI48_I2C_ADDRESS = 0x40
MI48_SPI_MODE = 0b00
MI48_SPI_MAX_SPEED_HZ = 31200000
MI48_SPI_CS_DELAY = 0.0001

# Setup I2C and SPI interfaces
i2c = I2C_Interface(SMBus(RPI_GPIO_I2C_CHANNEL), MI48_I2C_ADDRESS)
spi = SPI_Interface(SpiDev(RPI_GPIO_SPI_BUS, RPI_GPIO_SPI_CE_MI48), xfer_size=160)

spi.device.mode = MI48_SPI_MODE
spi.device.max_speed_hz = MI48_SPI_MAX_SPEED_HZ
spi.device.bits_per_word = 8
spi.device.lsbfirst = False
spi.cshigh = True
spi.no_cs = True
mi48_spi_cs_n = DigitalOutputDevice("BCM7", active_high=False, initial_value=False)

# Configure MI48 camera
mi48_reset_n = DigitalOutputDevice("BCM23", active_high=False, initial_value=True)
mi48_data_ready = DigitalInputDevice("BCM24", pull_up=False)  # Data Ready Pin

class MI48_reset:
    def __init__(self, pin, assert_seconds=0.000035, deassert_seconds=0.050):
        self.pin = pin
        self.assert_time = assert_seconds
        self.deassert_time = deassert_seconds

    def __call__(self):
        print('Resetting the MI48...')
        self.pin.on()
        time.sleep(self.assert_time)
        self.pin.off()
        time.sleep(self.deassert_time)
        print('Done.')

mi48 = MI48([i2c, spi], reset_handler=MI48_reset(pin=mi48_reset_n))
mi48.set_fps(7)  # Set framerate

# Give the camera time to warm up
time.sleep(2)  

mi48.start(stream=True, with_header=True)
logger.info(f"Camera is running. Images save to {SAVE_DIRECTORY}")

try:
    while True:
        user_input = input("Press ENTER to capture an image, or type 'q' to quit: ").strip().lower()

        if user_input == "q":
            logger.info("Exiting...")
            break

        mi48_data_ready.wait_for_active()
        logger.info("Capturing image...")

        mi48_spi_cs_n.on()
        time.sleep(MI48_SPI_CS_DELAY)
        data, header = mi48.read()
        mi48_spi_cs_n.off()

        # Check if data is None
        if data is None:
            logger.critical("Error: No data received from camera")
            continue

        imgh = data_to_frame(data, mi48.fpa_shape)

        # Normalize and apply a color map
        img8u = cv.normalize(imgh.astype('uint8'), None, 255, 0, norm_type=cv.NORM_MINMAX, dtype=cv.CV_8U)
        img8u = cv.applyColorMap(img8u, cv.COLORMAP_JET)

        # Save image to the new directory
        filename = get_filename()
        cv.imwrite(filename, img8u)
        logger.info(f"Image saved: {filename}")

except KeyboardInterrupt:
    logger.info("Stopping camera...")
finally:
    time.sleep(1)  # Allow time before stopping
    mi48.stop(stop_timeout=1.5)
    logger.info("Shutdown complete.")
